{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Payments APIs",
    "description": "The Payments API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which can be understood by off-the-shelf HTTP clients, and we support cross-origin resource sharing to allow you to interact securely with our API from a client-side web application (though you should remember that you should never expose your secret API key in any public website's client-side code). JSON will be returned in all responses from the API, including errors (though if you're using API bindings, we will convert the response to the appropriate language-specific object). To make the Payments API as explorable as possible, accounts have test-mode API keys as well as live-mode API keys. These keys can be active at the same time. Data created with test-mode credentials will never hit the credit card networks and will never cost anyone money.",
    "languages": ["c", "cpp", "clojure", "erlang", "go", "haskell", "javascript", "scala"],
    "authentication": {
      "summary": "You authenticate to the Payments API by providing one of your API keys in the request. You can manage your API keys from your account. You can have multiple API keys active at one time. Your API keys carry many privileges, so be sure to keep them secret! Authentication to the API occurs via HTTP Basic Auth. Provide your API key as the basic auth username. You do not need to provide a password. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. You must authenticate for all requests.",
      "snippets": {
        "c":      "https://gist.githubusercontent.com/anonymous/daf3814f7c927ae39356/raw/f1ca561fd908d6ce819837aa6359f267fb3707fc/auth.c",
        "cpp":    "https://gist.githubusercontent.com/anonymous/daf3814f7c927ae39356/raw/f1ca561fd908d6ce819837aa6359f267fb3707fc/auth.cpp",
        "erlang": "https://gist.githubusercontent.com/anonymous/daf3814f7c927ae39356/raw/f1ca561fd908d6ce819837aa6359f267fb3707fc/auth.erl",
        "go":     "https://gist.githubusercontent.com/anonymous/daf3814f7c927ae39356/raw/f1ca561fd908d6ce819837aa6359f267fb3707fc/auth.go"
      },
      "note" : "You must replace <code>APK_f1ca561fd908d6ce819837aa6</code> with your personal API key"
    },
    "termsOfService": "http://someapidevs.com/terms/",
    "contact": {
      "name": "Some API Team",
      "url": "http://someapidevs.com"
    },
    "license": {
      "name": "Creative Commons 4.0 International",
      "url": "http://creativecommons.org/licenses/by/4.0/"
    }
  },
  "host": "api.someapidevs.com",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/charges": {
      "get": {
        "tags": [ "Charge" ],
        "summary": "list all the charges",
        "responses": {
          "200": {
            "description": "charges response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Charge"
              }
            },
            "headers": {
              "x-expires": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refunds": {
      "get": {
        "tags": [ "Refund" ],
        "summary": "list all the Refunds",
        "responses": {
          "200": {
            "description": "Refunds response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Refund"
              }
            },
            "headers": {
              "x-expires": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }

  },
  "definitions": {
    "Charge": {
      "required": [
        "id",
        "created",
        "paid",
        "status",
        "amount",
        "currency",
        "last4",
        "brand",
        "exp_month",
        "exp_year",
        "country",
        "captured"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "paid": {
          "type": "boolean"
        },
        "status":{
          "type":"string"
        },
        "amount":{
          "type":"number",
          "format":"double"
        },
        "currency":{
          "type":"string"
        },
        "last4":{
          "type":"string"
        },
        "brand":{
          "type":"string"
        },
        "exp_month":{
          "type":"integer",
          "minimum": 1,
          "maximum": 12
        },
        "exp_year":{
          "type":"integer",
          "format":"int32"
        },
        "country":{
          "type":"string"
        },
        "captured": {
          "type": "boolean"
        }
      }
    },
    "Refund": {
      "required": [
        "id",
        "created",
        "amount",
        "currency",
        "reason",
        "charge"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "amount":{
          "type":"number",
          "format":"double"
        },
        "charge":{
          "type":"string"
        },
        "reason":{
          "type":"string"
        },
        "currency":{
          "type":"string"
        }
      }
    },

    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}
